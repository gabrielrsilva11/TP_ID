/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package trabalho_pratico;

import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.saxon.trans.XPathException;
import org.jdom2.Document;

/**
 *
 * @author gabriel
 */
public class Transform extends javax.swing.JFrame {

    /** Creates new form Transform */
    public Transform() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gerar XML Obras+Autores", "Gerar XML Obras Ordenado por Preço", "Gerar HTML Obras - Lista", "Gerar HTML Autores - Lista", "Gerar HTML Obras - Tabela", "Gerar HTML Autores - Tabela", "Gerar TXT Obras", "Gerar TXT Autores" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Go");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setText("Menu");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Sair");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String x= String.valueOf(jComboBox1.getSelectedItem());
        
        try {
            if(x.equals("Gerar XML Obras+Autores"))
            {
                 SaxonFunctions_XQuery.xQueryToXml("ambos.xml", "juncao.xquery");
                 StringBuilder resultado = new StringBuilder();
                 Scanner input = new Scanner(new FileInputStream("ambos.xml"));
                 String aux;
                 
                 while(input.hasNextLine())
                 {
                     aux = input.nextLine();
                     resultado.append(aux).append("\n");
                 }
                 input.close();
                 jTextArea1.setText(resultado.toString());
            }
            else if(x.equals("Gerar XML Obras Ordenado por Preço"))
            {
                 SaxonFunctions_XQuery.xQueryToXml("preco.xml", "preco.xquery");
                 StringBuilder resultado = new StringBuilder();
                 Scanner input = new Scanner(new FileInputStream("preco.xml"));
                 String aux;
                 
                 while(input.hasNextLine())
                 {
                     aux = input.nextLine();
                     resultado.append(aux).append("\n");
                 }
                 input.close();
                 jTextArea1.setText(resultado.toString());
            }
            else if(x.equals("Gerar HTML Obras - Lista"))
            {
                SaxonFunctions_XQuery.xQueryToHtml("obrasBullets.html", "htmlObrasBullets.xquery");
                String url="obrasBullets.html";
                jTextArea1.setText("Sucesso, a abrir o browser");
                File htmlFile = new File(url);
                try {
                    Desktop.getDesktop().browse(htmlFile.toURI());
                } catch (IOException ex) {
                    Logger.getLogger(Transform.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else if(x.equals("Gerar HTML Autores - Lista"))
            {
                SaxonFunctions_XQuery.xQueryToHtml("autoresBullets.html", "htmlAutoresBullets.xquery");
                String url="autoresBullets.html";
                jTextArea1.setText("Sucesso, a abrir o browser");
                File htmlFile = new File(url);
                try {
                    Desktop.getDesktop().browse(htmlFile.toURI());
                } catch (IOException ex) {
                    Logger.getLogger(Transform.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else if(x.equals("Gerar HTML Autores - Tabela"))
            {
                Document doc = XMLJDomFunctions.lerDocumentoXML("autores.xml");
                if(doc != null){
                   Document novo = JDOMFunctions_XSLT.transformaDocumento(doc, "autores.xml", "htmlAutoresTabela.xsl");
                   XMLJDomFunctions.escreverDocumentoParaFicheiro(novo, "autores_table.html");
                   
                   jTextArea1.setText("Sucesso, a abrir o browser");
                   
                   String url="autores_table.html";
                   File htmlFile = new File(url);
                   Desktop.getDesktop().browse(htmlFile.toURI());
                    
                }
            }
            else if(x.equals("Gerar HTML Obras - Tabela"))
            {
                Document doc = XMLJDomFunctions.lerDocumentoXML("livros.xml");
                if(doc != null){
                   Document novo = JDOMFunctions_XSLT.transformaDocumento(doc, "livros.xml", "htmlObrasTabela.xsl");
                   XMLJDomFunctions.escreverDocumentoParaFicheiro(novo, "obras_table.html");
                   
                   jTextArea1.setText("Sucesso, a abrir o browser");
                   
                   String url="obras_table.html";
                   File htmlFile = new File(url);
                   Desktop.getDesktop().browse(htmlFile.toURI()); 
                }
            }
            else if(x.equals("Gerar TXT Obras"))
            {
                Document doc = XMLJDomFunctions.lerDocumentoXML("livros.xml");
                if(doc != null)
                {
                    JDOMFunctions_XSLT.transformaDocumento2("livros.xml", "txtObras.xsl", "livros.txt");
                    StringBuilder texto = new StringBuilder();
                    String linha;
                    Scanner ler = new Scanner(new FileInputStream("livros.txt"));
                    while(ler.hasNextLine()){
                        linha=ler.nextLine();
                        texto.append(linha).append("\n");
                    }
                    ler.close();
                    jTextArea1.setText(texto.toString());
                }
            }
            else if(x.equals("Gerar TXT Autores"))
            {
                Document doc = XMLJDomFunctions.lerDocumentoXML("autores.xml");
                if(doc != null)
                {
                    JDOMFunctions_XSLT.transformaDocumento2("autores.xml", "txtAutores.xsl", "autores.txt");
                    StringBuilder texto = new StringBuilder();
                    String linha;
                    Scanner ler = new Scanner(new FileInputStream("autores.txt"));
                    while(ler.hasNextLine()){
                        linha=ler.nextLine();
                        texto.append(linha).append("\n");
                    }
                    ler.close();
                    jTextArea1.setText(texto.toString());
                }
            }
        
           
        } catch (XPathException ex) {
            Logger.getLogger(Trabalho_Pratico.class.getName()).log(Level.SEVERE, null, ex);
            jTextArea1.setText("Ocorreu um erro");
        } catch (IOException ex) {
            Logger.getLogger(Transform.class.getName()).log(Level.SEVERE, null, ex);
            jTextArea1.setText("Ocorreu um erro");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transform().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
